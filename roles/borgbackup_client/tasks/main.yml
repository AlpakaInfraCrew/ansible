---
# As earlier playbook versions used apt and to prevent having two borg versions installed
# we remove them here
- name: Make sure borg is not installed via apt # noqa package-latest
  ansible.builtin.apt:
    name:
      - borgmatic
      - borgbackup
    state: absent

- name: Make sure dependencies are installed # noqa package-latest
  ansible.builtin.apt:
    name:
      - libfuse3-dev
      - libacl1-dev
      - libssl-dev
      - "{{ 'python3-venv' if ansible_distribution == 'Ubuntu' else 'python3-full' }}"
      - python3-dev
      - pkg-config
      - gcc
    state: latest

# Install Borg via pip as it is more current than debian and a lot more current than ubuntu
# This is quite important for data integrity and a good idea for newer features (that are not yet on Ubuntu)
# We can not download the static binaries as there are no official ones for ARM
# We need to install into a virtualenv, as the python env from debian is apt managed
- name: Make sure borg is intalled # noqa package-latest
  ansible.builtin.pip:
    name: 
      - pyfuse3
      - borgbackup[pyfuse3]
      - borgmatic
      - zulip
    state: latest
    virtualenv_command: python3 -m venv
    virtualenv: /opt/borg-venv

- name: Link borg into path
  ansible.builtin.file:
    src: '/opt/borg-venv/bin/{{ item }}'
    dest: '/usr/bin/{{ item }}'
    owner: root
    group: root
    state: hard
  loop:
    - borg
    - borgmatic

# This is later used to access the backup server/storage box
- name: Generate SSH key
  ansible.builtin.user:
    name: root
    generate_ssh_key: true
    ssh_key_type: ed25519

- name: Get public key
  ansible.builtin.command: "cat /root/.ssh/id_ed25519.pub"
  register: hostkey
  changed_when: false

- name: Configure storage box access
  ansible.builtin.import_tasks: onserver_storagebox.yml
  vars:
    borgbackup_source_key: "{{ hostkey.stdout }}"
    borgbackup_source_host: "{{ ansible_hostname }}"
  delegate_to: "{{ borgbackup_target_host }}"
  when: "borgbackup_target_is_storagebox"

- name: Create borg on remote server
  ansible.builtin.import_tasks: onserver.yml
  vars:
    borgbackup_source_key: "{{ hostkey.stdout }}"
    borgbackup_source_host: "{{ ansible_hostname }}"
  delegate_to: "{{ borgbackup_target_host }}"
  when: "not borgbackup_target_is_storagebox"

- name: Check if Repo already exists
  ansible.builtin.stat:
    path: "{{ hostvars[borgbackup_target_host]['borgbackup_pool'] | default(borgbackup_pool) }}/{{ borgbackup_repo_path }}/config"
  register: repo
  delegate_to: "{{ borgbackup_target_host }}"

- name: Gather facts for backup target
  ansible.builtin.setup:
  delegate_to: "{{ borgbackup_target_host }}"
  delegate_facts: true
  when: hostvars[borgbackup_target_host]['ansible_default_ipv4'] is not defined

- name: Set target IP
  ansible.builtin.set_fact:
    borgbackup_target_ip: "{{ borgbackup_target_ip | default(hostvars[borgbackup_target_host]['ansible_default_ipv4']['address'], true) }}"

- name: Allow Postgres access
  ansible.builtin.lineinfile:
    path: "{{ borgbackup_psql_config }}/pg_hba.conf"
    line: "local   all             postgres                                trust"
  when: borgbackup_psql_enable

- name: Create Borg Repo
  ansible.builtin.command: "borg init -e repokey {{ borgbackup_target_user }}@{{ borgbackup_target_ip }}:{{ hostvars[borgbackup_target_host]['borgbackup_pool'] | default(borgbackup_pool) }}/{{ borgbackup_repo_path }}"
  environment:
    BORG_PASSPHRASE: "{{ borgbackup_enable_encryption | ternary(borgbackup_key, '') }}"
    BORG_RSH: "ssh -o 'StrictHostKeyChecking=accept-new' -p {{ borgbackup_target_port }}"
  when: not repo.stat.exists

- name: Create borgmatic config folder
  ansible.builtin.file:
    path: /etc/borgmatic
    state: directory
    owner: root
    group: root
    mode: 0750

- name: Copy borgmatic config
  ansible.builtin.template:
    src: config.yaml.j2
    dest: /etc/borgmatic/config.yaml
    mode: 0600

- name: Add borgbackup service
  ansible.builtin.copy:
    src: "borgbackup.service"
    dest: "/etc/systemd/system/borgbackup.service"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: Enable borgmatic timer

- name: Add borgbackup timer
  ansible.builtin.template:
    src: "borgbackup.timer"
    dest: "/etc/systemd/system/borgbackup.timer"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: Enable borgmatic timer

- name: Add borgbackup-check service
  ansible.builtin.copy:
    src: "borgbackup-check.service"
    dest: "/etc/systemd/system/borgbackup-check.service"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: Enable borgmatic-check timer

- name: Add borgbackup-check timer
  ansible.builtin.copy:
    src: "borgbackup-check.timer"
    dest: "/etc/systemd/system/borgbackup-check.timer"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: Enable borgmatic-check timer

- name: Copy notify script
  ansible.builtin.template:
    src: borgbackup-panic.sh.j2
    dest: /usr/local/bin/borgbackup-panic
    owner: root
    group: root
    mode: 0755

- name: Copy notify service
  ansible.builtin.copy:
    src: borgbackup-panic.service
    dest: /etc/systemd/system/borgbackup-panic@.service
    owner: root
    group: root
    mode: 0644
  notify: Enable borgmatic-check timer
